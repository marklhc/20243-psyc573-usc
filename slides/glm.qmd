---
title: "Generalized Linear Model (GLM)"
date-modified: last-modified
format: metropolis-revealjs
---

```{r}
#| include: false
#| file: _setting.R
```

```{r}
library(brms)
options(brms.backend = "cmdstanr")
library(modelsummary)
```

## GLM

Three components:

- Conditional distribution of $Y$
- Link function
- Linear predictor ($\eta$)

## Some Examples

| Outcome type | Support          | Distributions | Link |
|:------------:|:----------------:|:-------------:|:----:|
| continuous | [$-\infty$, $\infty$] | Normal | Identity |
| count (fixed duration) | {0, 1, $\ldots$} | Poisson | Log |
| count (known # of trials) | {0, 1, $\ldots$, $N$} | Binomial | Logit |
| binary | {0, 1} | Bernoulli | Logit |
| ordinal | {0, 1, $\ldots$, $K$} | categorical | Logit |
| nominal | $K$-vector of {0, 1} | categorical | Logit |
| multinomial | $K$-vector of {0, 1, $\ldots$, $K$} | categorical | Logit |

## Mathematical Form (One Predictor)

$$
\begin{aligned}
  Y_i & \sim \mathrm{Dist}(\mu_i, \tau)  \\
  g(\mu_i) & = \eta_i \\
  \eta_i & = \beta_0 + \beta_1 X_{i}
\end{aligned}
$$

::: {.incremental}
- $\mathrm{Dist}$: conditional distribution of $Y \mid X$ (e.g., normal, Bernoulli, $\ldots$)
    * I.e., distribution of **prediction error**; not the marginal distribution of $Y$
- $\mu_i$: mean parameter for the $i$th observation
- $\eta_i$: linear predictor
- $g(\cdot)$: link function
- ($\tau$: dispersion parameter)
:::

## Illustration

Next few slides contain example GLMs, with the same predictor $X$

```{r}
set.seed(1817)
```

```{r}
#| echo: true
num_obs <- 100
x <- runif(num_obs, min = 1, max = 5)  # uniform x
beta0 <- 0.2; beta1 <- 0.5
```

## Normal, Identity Link

aka linear regression

:::: {.columns}

::: {.column width="50%"}

$$
\begin{aligned}
  Y_i & \sim N(\mu_i, \sigma) \\
  \mu_i & = \eta_i \\
  \eta_i & = \beta_0 + \beta_1 X_{i}
\end{aligned}
$$

:::

::: {.column width="50%"}

```{r}
#| echo: true
eta <- beta0 + beta1 * x
mu <- eta
y <- rnorm(num_obs, mean = mu, sd = 0.3)
```

```{r}
#| label: plot-sim
#| fig-width: 5
#| fig-asp: .618
data.frame(x = x, y = y) |>
    ggplot(aes(x = x, y = y)) +
    geom_point() +
    geom_smooth(aes(y = mu, x = x))
```

:::

::::

## Poisson, Log Link

aka poisson regression

:::: {.columns}

::: {.column width="50%"}

$$
\begin{aligned}
  Y_i & \sim \mathrm{Pois}(\mu_i) \\
  \log(\mu_i) & = \eta_i \\
  \eta_i & = \beta_0 + \beta_1 X_{i}
\end{aligned}
$$

:::

::: {.column width="50%"}

```{r}
#| echo: true
eta <- beta0 + beta1 * x
mu <- exp(eta)  # inverse link
y <- rpois(num_obs, lambda = mu)
```

```{r}
#| ref-label: plot-sim
#| fig-width: 5
#| fig-asp: .618
```

:::

::::

## Bernoulli, Logit Link

aka binary logistic regression

:::: {.columns}

::: {.column width="50%"}

$$
\begin{aligned}
  Y_i & \sim \mathrm{Bern}(\mu_i) \\
  \log\left(\frac{\mu_i}{1 - \mu_i}\right) & = \eta_i \\
  \eta_i & = \beta_0 + \beta_1 X_{i}
\end{aligned}
$$

:::

::: {.column width="50%"}

```{r}
#| echo: true
eta <- beta0 + beta1 * x
mu <- plogis(eta)  # inverse link is logistic
y <- rbinom(num_obs, size = 1, prob = mu)
```

```{r}
#| ref-label: plot-sim
#| fig-width: 5
#| fig-asp: .618
```

:::

::::

## Binomial, Logit Link

aka binomial logistic regression

:::: {.columns}

::: {.column width="50%"}

$$
\begin{aligned}
  Y_i & \sim \mathrm{Bin}(N, \mu_i) \\
  \log\left(\frac{\mu_i}{1 - \mu_i}\right) & = \eta_i \\
  \eta_i & = \beta_0 + \beta_1 X_{i}
\end{aligned}
$$

:::

::: {.column width="50%"}

```{r}
#| echo: true
num_trials <- 10
eta <- beta0 + beta1 * x
mu <- plogis(eta)  # inverse link is logistic
y <- rbinom(num_obs, size = num_trials, prob = mu)
```

```{r}
#| fig-width: 5
#| fig-asp: .618
data.frame(x = x, y = y) |>
    ggplot(aes(x = x, y = y)) +
    geom_point() +
    geom_smooth(aes(y = mu * num_trials, x = x))
```

:::

::::

## Remarks

Different link functions can be used

- E.g., identity link or probit link for Bernoulli variables

. . .

Linearity is a strong assumption

::: {.incremental}
- GLM can allow $\eta$ and $X$ to be nonlinearly related, as long as it's linear in the coefficients
    * E.g., $\eta_i = \beta_0 + \beta_1 \log(X_{i})$
    * E.g., $\eta_i = \beta_0 + \beta_1 X_i + \beta_2 X_i^2$
    * But not something like $\eta_i = \beta_0 \log(\beta_1 + x_i)$
:::

# Logistic Regression

See exercise 

# Poisson Regression

---

- `count`: The seizure count between two visits
- `Trt`: Either 0 or 1 indicating if the patient received anticonvulsant therapy

$$
\begin{aligned}
  \text{count}_i & \sim \mathrm{Pois}(\mu_i)  \\
  \log(\mu_i) & = \eta_i \\
  \eta_i & = \beta_0 + \beta_1 \text{Trt}_{i}
\end{aligned}
$$

```{r}
#| fig-align: center
#| fig-width: 4.5
#| fig-asp: 0.618
set.seed(1417)
epilepsy4 <- dplyr::filter(epilepsy, visit == 4)
epilepsy4$Trt <- factor(epilepsy4$Trt)
ggplot(epilepsy4, aes(x = Trt, y = count)) +
    geom_boxplot() +
    geom_jitter(width = 0.05)
```

---

### Poisson with log link

Predicted seizure rate = $\exp(\beta_0 + \beta_1) = \exp(\beta_0) \exp(\beta_1)$ for Trt = 1; $\exp(\beta_0)$ for Trt = 0

$\beta_1$ = mean difference in **log** rate of seizure; $\exp(\beta_1)$ = ratio in rate of seizure 

---

```{r}
#| echo: true
#| results: "hide"
m2 <- brm(count ~ Trt, data = epilepsy4,
          family = poisson(link = "log"))
```

```{r}
m2
```

---

### Poisson with identity link

In this case, with one binary predictor, the link does not matter to the fit

$$
\begin{aligned}
  \text{count}_i & \sim \mathrm{Pois}(\mu_i)  \\
  \mu_i & = \eta_i \\
  \eta_i & = \beta_0 + \beta_1 \text{Trt}_{i}
\end{aligned}
$$

$\beta_1$ = mean difference in the rate of seizure in two weeks

```{r}
#| echo: true
#| results: "hide"
m3 <- brm(count ~ Trt, data = epilepsy4,
          family = poisson(link = "identity"))
```

::: {.content-hidden unless-profile="class"}

---

:::: {.columns}

::: {.column width="50%"}

Prediction With Log Link

```{r}
#| fig-width: 4.5
#| fig-asp: 1
set.seed(1847)
plot(
    conditional_effects(m2),
    points = TRUE,
    point_args = list(size = 0.5, width = 0.05)
)
```

:::

::: {.column width="50%"}

Prediction With Identity Link

```{r}
#| fig-width: 4.5
#| fig-asp: 1
set.seed(1847)
plot(
    conditional_effects(m3),
    points = TRUE,
    point_args = list(size = 0.5, width = 0.05)
)
```

:::

::::

:::

---

```{r}
msummary(list(`log link` = m2,
              `identity link` = m3),
         statistic = "conf.int", fmt = 2)
```
